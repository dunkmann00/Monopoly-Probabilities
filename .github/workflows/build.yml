name: Build Binaries

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]


jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    env:
      NO_VIRTUAL_ENV: 1
      PYTHONUNBUFFERED: 1
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, windows-2022, ubuntu-22.04]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Monopoly
        run: python install_monopoly.py
      - name: Install Binary Build Requirements
        run: scriptopoly install
      - name: Get Version (non-release)
        if: github.event.release == null
        run: echo "VERSION=dev-$(git rev-parse --short ${{ github.sha }})" >> ${{ github.env }}
      - name: Get Version (release)
        if: github.event.release
        run: echo "VERSION=${{ github.ref_name }}" >> ${{ github.env }}
      - name: Get Build Name
        run: echo "BUILD_NAME=monopoly-${{ env.VERSION }}-$(python -c "import sysconfig; print(sysconfig.get_platform())")" >> ${{ github.env }}
      - name: Set BUILD_DISTPATH Environment Variable
        run: echo "BUILD_DISTPATH=$(python -c "import pathlib; print(pathlib.Path(r'${{ runner.temp }}') / 'dist' / '${{ env.BUILD_NAME }}')")" >> ${{ github.env }}
      - name: Setup keychain (macOS only)
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # Based on blog post by Federico Terzi & Localazy:
          # https://federicoterzi.com/blog/automatic-code-signing-and-notarization-for-macos-apps-using-github-actions/
          # https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
          # Also based on Github's guide for signing Xcode applications
          # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development

          # Make keychain temporary directory
          mkdir $RUNNER_TEMP/keychain

          # Create path variables
          CERTIFICATE_PATH=$RUNNER_TEMP/keychain/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/keychain/build.keychain

          # Turn our base64-encoded certificate back to a regular .p12 file
          echo $MACOS_CERTIFICATE | base64 --decode > $CERTIFICATE_PATH

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment

          # Create keychain
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -k $KEYCHAIN_PATH -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" $KEYCHAIN_PATH

      - name: Build All Binaries (macOS Only)
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        run: scriptopoly all-binaries --macos-codesign-identity "$MACOS_CERTIFICATE_NAME"
      - name: "Notarize app bundle (macOS Only)"
        if: runner.os == 'macOS'
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          echo "Creating temp notarization archive"
          NOTARIZATION_PATH=$RUNNER_TEMP/notary/notarization
          scriptopoly archive-binaries --base-name $NOTARIZATION_PATH --format zip

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. We pass in all the credentials, including the password so that we can prevent a
          # UI password dialog from blocking the CI

          echo "Notarize app"
          xcrun notarytool submit "$NOTARIZATION_PATH.zip" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD" --wait

          # This is where we would normally "attach the staple" to our executable. Unfortunately that can't be done at
          # this time:
          #
          #   "Although tickets are created for standalone binaries, itâ€™s not currently possible to staple tickets to them."
          #   (Source: https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow#3087720)
          #
          # This isn't a huge problem because our binary can still be verified on a users machine as long as there is an
          # internet connection.

      - name: Build All Binaries
        if: runner.os != 'macOS'
        run: scriptopoly all-binaries
      - name: Create Binary Archive
        run: scriptopoly archive-binaries
      - name: Upload Binary Archive
        # Even though downloading artifacts wraps them in another zip file we still want to archive
        # the binaries ourselves. Doing so preserves file permissions and keeps the binaries exectuable.
        # https://github.com/actions/upload-artifact/blob/v3/README.md#zipped-artifact-downloads
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_NAME }}
          path: |
            ${{ env.BUILD_DISTPATH }}.zip
            ${{ env.BUILD_DISTPATH }}.tar.gz
          if-no-files-found: error
      - name: Release Binary Archive
        if: github.event.release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.BUILD_DISTPATH }}.*(zip|tar.gz)
